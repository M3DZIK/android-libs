import{_ as s,c as n,o as a,a as e}from"./app-Cffz9ejT.js";const t={},p=e(`<h1 id="encrypted-datastore" tabindex="-1"><a class="header-anchor" href="#encrypted-datastore"><span>Encrypted DataStore</span></a></h1><h2 id="encrypteddatastore-and-serializer" tabindex="-1"><a class="header-anchor" href="#encrypteddatastore-and-serializer"><span>EncryptedDataStore and Serializer</span></a></h2><p>To create an encrypted datastore, create a data class that extends <code>EncryptedDataStore</code>. Then create a serializer for this class.</p><p>Example:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="line"><span class="token keyword">enum</span> <span class="token keyword">class</span> Key <span class="token operator">:</span> KeyStoreAlias <span class="token punctuation">{</span></span>
<span class="line">    EncryptedDataStore</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@Serializable</span></span>
<span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">SecretsStore</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">val</span> value<span class="token operator">:</span> String</span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">:</span> EncryptedDataStore</span>
<span class="line"></span>
<span class="line"><span class="token keyword">object</span> SecretsStoreSerializer <span class="token operator">:</span> EncryptedDataStoreSerializer<span class="token operator">&lt;</span>SecretsStore<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">val</span> keyStoreAlias <span class="token operator">=</span> Key<span class="token punctuation">.</span>EncryptedDataStore</span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">val</span> defaultValue <span class="token operator">=</span> <span class="token function">SecretsStore</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">encode</span><span class="token punctuation">(</span>t<span class="token operator">:</span> SecretsStore<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> Json<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">decode</span><span class="token punctuation">(</span>str<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> SecretsStore <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> Json<span class="token punctuation">.</span><span class="token function">decodeFromString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create-a-datastore" tabindex="-1"><a class="header-anchor" href="#create-a-datastore"><span>Create a datastore</span></a></h2><p>Create a datastore instance with this <code>SecretsStoreSerializer</code> serializer.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">val</span> Context<span class="token punctuation">.</span>secretsDataStore<span class="token operator">:</span> DataStore<span class="token operator">&lt;</span>SecretsStore<span class="token operator">&gt;</span> <span class="token keyword">by</span> <span class="token function">dataStore</span><span class="token punctuation">(</span></span>
<span class="line">    fileName <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;secretsStore.pb&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    serializer <span class="token operator">=</span> SecretsStoreSerializer</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="read-write-data" tabindex="-1"><a class="header-anchor" href="#read-write-data"><span>Read/Write Data</span></a></h2><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="line"><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">example</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// write data to datastore</span></span>
<span class="line">    context<span class="token punctuation">.</span>secretsDataStore<span class="token operator">..</span><span class="token function">updateData</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">SecretsStore</span><span class="token punctuation">(</span></span>
<span class="line">            value <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello World&quot;</span></span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// read data from datastore</span></span>
<span class="line">    <span class="token keyword">val</span> secretsStore <span class="token operator">=</span> context<span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">,</span> secretsStore<span class="token punctuation">.</span>value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),l=[p];function o(i,c){return a(),n("div",null,l)}const d=s(t,[["render",o],["__file","encrypted_datastore.html.vue"]]),u=JSON.parse('{"path":"/crypto/encrypted_datastore.html","title":"Encrypted DataStore","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"EncryptedDataStore and Serializer","slug":"encrypteddatastore-and-serializer","link":"#encrypteddatastore-and-serializer","children":[]},{"level":2,"title":"Create a datastore","slug":"create-a-datastore","link":"#create-a-datastore","children":[]},{"level":2,"title":"Read/Write Data","slug":"read-write-data","link":"#read-write-data","children":[]}],"git":{"updatedTime":1718828825000,"contributors":[{"name":"Oskar Karpi≈Ñski","email":"me@medzik.dev","commits":1}]},"filePathRelative":"crypto/encrypted_datastore.md"}');export{d as comp,u as data};
